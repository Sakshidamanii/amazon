class Solution {
    public String predictPartyVictory(String senate) {
        int n = senate.length();
        Queue<Integer> radiant = new LinkedList<>();
        Queue<Integer> dires = new LinkedList<>();
        
        for(int i = 0; i < senate.length(); i++){
            if(senate.charAt(i) == 'R'){
                radiant.add(i);
            }else{
                dires.add(i);
            }
        }
        // 012 
        // RDD
        // radiant = [0] 
        // dires   = [1,2]
        // First D(0) & First R(1) is deleted or popped out 
        // but (0 < 1) that means we want to delete only the larger index so push back the smaller index (or you can say push back the left one)
        // push again R which you have deleted previously but here is a catch push it back with the updated index for the next round
        // example : 
        // R D D
        // 0 1 2
        // 3 4 5
        // 6 7 8
        // 9 ..... so on 
        // radiant.add(0 + 3); i.e radiant.add(3);
        // radiant = [3]
        // dires   = [2]
        // index 1 is banned(X)
        // RXD
        // 3 2
        // delete both 
        // push back smaller again i.e iD
        // (2 < 3) so dires.add(3 + 3) = add(6) in dires queue
        // raidant = []
        // dires   = [6]
        // XXD, D is left at index 6 and radiant is empty now so ans is "Dire".
        
        while(!radiant.isEmpty() && !dires.isEmpty()){
            int iR = radiant.poll();
            int iD = dires.poll();
            if(iR < iD){
                radiant.add(iR + n);      
            }else{
                dires.add(iD + n);
            }
        }
        return radiant.isEmpty() ? "Dire" : "Radiant";
    }
}
